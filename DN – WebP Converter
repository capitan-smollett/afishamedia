<?php
/**
 * Plugin Name: DN – WebP Converter (No Originals)
 * Description: Конвертирует JPEG/PNG в WebP, удаляет оригиналы, перемещает в /uploads/YYYY/, обновляет ссылки в постах, показывает % сжатия и даёт ручную конвертацию в Медиа-библиотеке.
 * Version: 1.2.0
 * Author: DiasporaDev
 * Requires at least: 6.2
 * Requires PHP: 7.4
 */

if ( ! defined( 'ABSPATH' ) ) { exit; }

class DN_WebP_Converter {
	const OPT_AUTO   = 'dn_webp_auto';
	const OPT_QLT    = 'dn_webp_quality';
	const META_ORIG  = '_dn_webp_original_bytes';
	const META_WEBP  = '_dn_webp_bytes';
	const META_DONE  = '_dn_webp_done';
	const NONCE_BULK = 'dn_webp_bulk';
	const ACTION_BULK= 'dn_convert_to_webp';
	const AJAX_ACTION = 'dn_webp_bulk_convert_ajax';
	const AJAX_NONCE  = 'dn_webp_ajax_nonce';


	public function __construct() {
		// Настройки по умолчанию
		add_action('admin_init', function(){
			if ( get_option(self::OPT_AUTO, null) === null ) update_option(self::OPT_AUTO, 1);
			if ( get_option(self::OPT_QLT, 82) === null ) update_option(self::OPT_QLT, 82);
		});

		// Разрешаем webp
		add_filter('upload_mimes', function($m){ $m['webp']='image/webp'; return $m; });

		// Новые загрузки: принудительно делаем размеры в WebP
		add_filter('image_editor_output_format', function($fmts){
			$fmts['image/jpeg']='image/webp';
			$fmts['image/png']='image/webp';
			return $fmts;
		});

		// Автоконвертация по завершении генерации метаданных (новые/обновлённые вложения)
		add_filter('wp_generate_attachment_metadata', [$this,'hook_autoconvert'], 99, 2);

		// Колонки и массовое действие в Медиа
		add_filter('manage_upload_columns', [$this,'col_add']);
		add_action('manage_media_custom_column', [$this,'col_render'], 10, 2);
		add_filter('bulk_actions-upload', [$this,'bulk_action_add']);
		add_filter('handle_bulk_actions-upload', [$this,'bulk_action_handle'], 10, 3);

		// Страница отчёта и настроек
		add_action('admin_menu', function(){
			add_media_page('WebP отчёт (DN)', 'WebP отчёт (DN)', 'upload_files', 'dn-webp-report', [$this,'render_report_page']);
		});
		add_action('admin_init', [$this,'register_settings']);

		// Регистрируем AJAX-обработчик для массовой конвертации
		add_action('wp_ajax_' . self::AJAX_ACTION, [$this, 'ajax_bulk_convert']);


		// Безопасные AJAX/CLI можно добавить при необходимости
		if ( defined('WP_CLI') && WP_CLI ) {
			\WP_CLI::add_command('dn-webp convert', function($args,$assoc){
				$ids = [];
				if (!empty($assoc['ids'])) {
					$ids = array_map('intval', preg_split('~[,\s]+~', $assoc['ids']));
				} else {
					$q = new \WP_Query(['post_type'=>'attachment','post_status'=>'inherit','fields'=>'ids','posts_per_page'=>-1, 'post_mime_type'=>['image/jpeg','image/png']]);
					$ids = $q->posts;
				}
				$done=0;$fail=0;
				foreach($ids as $id){
					$res = $this->convert_attachment($id, true);
					if ($res===true) { $done++; \WP_CLI::log("OK #$id"); } else { $fail++; \WP_CLI::warning("FAIL #$id: $res"); }
				}
				\WP_CLI::success("Готово. Успешно: $done; Ошибок: $fail");
			});
		}
	}

	/** Автоконвертация новых изображений */
	public function hook_autoconvert($metadata, $attachment_id){
		$auto = (int) get_option(self::OPT_AUTO, 1);
		if (!$auto) return $metadata;

		$type = get_post_mime_type($attachment_id);
		if (!in_array($type,['image/jpeg','image/png','image/webp'],true)) return $metadata;

		// Уже делали?
		if (get_post_meta($attachment_id, self::META_DONE, true)) return $metadata;

		// Конвертируем и, если успешно, возвращаем актуализированные метаданные
		$res = $this->convert_attachment($attachment_id, false, $metadata);
		if ($res===true) {
			return wp_get_attachment_metadata($attachment_id); // перечитали после обновления
		}
		return $metadata;
	}

	/** Добавляем колонку в Медиа */
	public function col_add($cols){
		$cols['dn_webp'] = 'WebP (DN)';
		return $cols;
	}
	public function col_render($column_name, $post_id){
		if ($column_name!=='dn_webp') return;
		$done = get_post_meta($post_id, self::META_DONE, true);
		$orig = (int) get_post_meta($post_id, self::META_ORIG, true);
		$webp = (int) get_post_meta($post_id, self::META_WEBP, true);
		if ($done && $orig>0 && $webp>0) {
			$saved = max(0, round(100*($orig-$webp)/$orig,1));
			echo '<strong>✓</strong> −'.$saved.'% <span class="dn-webp-size">('.esc_html(size_format($webp)).')</span>';
		} elseif ($done) {
			echo '<strong>✓</strong>';
		} else {
			$type = get_post_mime_type($post_id);
			if (in_array($type,['image/jpeg','image/png'],true)) {
				$url = wp_nonce_url( admin_url('upload.php?action='.self::ACTION_BULK.'&ids='.$post_id), self::NONCE_BULK );
				echo '<a href="'.esc_url($url).'">Конвертировать</a>';
			} else {
				echo '—';
			}
		}
	}

	/** Массовое действие */
	public function bulk_action_add($actions){
		$actions[self::ACTION_BULK] = 'Конвертировать в WebP (DN)';
		return $actions;
	}
	public function bulk_action_handle($redirect, $doaction, $ids){
		if ($doaction!==self::ACTION_BULK) return $redirect;
		check_admin_referer('bulk-media');

		$ok=0;$fail=0;
		foreach($ids as $id){
			$res = $this->convert_attachment((int)$id, true);
			if ($res===true) $ok++; else $fail++;
		}
		return add_query_arg(['dn_webp_ok'=>$ok,'dn_webp_fail'=>$fail], $redirect);
	}

	/** Настройки */
	public function register_settings(){
		register_setting('dn_webp_settings', self::OPT_AUTO, ['type'=>'integer','sanitize_callback'=>function($v){return $v?1:0;}]);
		register_setting('dn_webp_settings', self::OPT_QLT, ['type'=>'integer','sanitize_callback'=>function($v){$v=(int)$v; if($v<0)$v=0; if($v>100)$v=100; return $v;}]);
	}

	/** Страница отчёта */
	public function render_report_page(){
		if (!current_user_can('upload_files')) wp_die('Недостаточно прав');
		$auto = (int) get_option(self::OPT_AUTO, 1);
		$qlt  = (int) get_option(self::OPT_QLT, 82);

		// Сводка
		global $wpdb;
		$orig_sum = (int) $wpdb->get_var("SELECT SUM(meta_value+0) FROM {$wpdb->postmeta} WHERE meta_key='".self::META_ORIG."'");
		$webp_sum = (int) $wpdb->get_var("SELECT SUM(meta_value+0) FROM {$wpdb->postmeta} WHERE meta_key='".self::META_WEBP."'");
		$total_saved = ($orig_sum>0 && $webp_sum>0) ? round(100*($orig_sum-$webp_sum)/$orig_sum,1) : 0;

		echo '<div class="wrap"><h1>WebP отчёт (DN)</h1>';
		if (isset($_GET['dn_webp_ok'])){
			printf('<div class="updated notice"><p>Конвертировано: %d; Ошибок: %d.</p></div>', (int)$_GET['dn_webp_ok'], (int)$_GET['dn_webp_fail']);
		}

		echo '<h2>Сводка</h2>';
		echo '<p><strong>Качество WebP:</strong> '.esc_html($qlt).'</p>';
		echo '<p><strong>Автоконвертация новых загрузок:</strong> '.($auto?'включена':'выключена').'</p>';
		echo '<p><strong>Экономия по библиотеке:</strong> '.$total_saved.'% ('.size_format($orig_sum).' → '.size_format($webp_sum).')</p>';

		echo '<form method="post" action="options.php">';
		settings_fields('dn_webp_settings');
		echo '<h2>Настройки</h2>';
		echo '<label><input type="checkbox" name="'.self::OPT_AUTO.'" value="1" '.checked(1,$auto,false).'> Автоматически конвертировать новые изображения</label><br>';
		echo '<label>Качество WebP: <input type="number" name="'.self::OPT_QLT.'" min="0" max="100" value="'.esc_attr($qlt).'"></label>';
		submit_button('Сохранить');
		echo '</form>';

		echo '<hr/>';
		echo '<h2>Массовая конвертация ранее загруженных изображений</h2>';

		// Ищем изображения, которые ещё не конвертированы
		$unconverted_query = new \WP_Query([
			'post_type' => 'attachment',
			'post_status' => 'inherit',
			'post_mime_type' => ['image/jpeg', 'image/png'],
			'posts_per_page' => -1,
			'fields' => 'ids',
			'meta_query' => [
				[
					'key' => self::META_DONE,
					'compare' => 'NOT EXISTS',
				]
			]
		]);
		$unconverted_count = count($unconverted_query->posts);

		if ($unconverted_count > 0) {
			echo '<p>Найдено <strong>' . $unconverted_count . '</strong> JPG/PNG изображений для конвертации.</p>';
			echo '<div id="dn-webp-bulk-wrapper">';
			echo '<button type="button" class="button button-primary" id="dn-webp-start-bulk">Начать конвертацию</button>';
			echo '<div id="dn-webp-bulk-progress" style="margin-top:1em; display:none;">';
			echo '<progress id="dn-webp-progress-bar" value="0" max="' . $unconverted_count . '" style="width: 100%;"></progress>';
			echo '<p>Прогресс: <span id="dn-webp-progress-text">0</span> / ' . $unconverted_count . '. Ошибок: <span id="dn-webp-error-count">0</span>.</p>';
			echo '</div>';
			echo '<div id="dn-webp-bulk-complete" style="margin-top:1em; display:none;" class="notice notice-success"><p><strong>Готово!</strong> Все изображения успешно сконвертированы.</p></div>';
			echo '</div>';
			$this->render_bulk_script($unconverted_count);
		} else {
			echo '<p>Отлично! Все подходящие изображения в медиабиблиотеке уже сконвертированы в WebP.</p>';
		}

		echo '<p>Также вы можете открыть «Медиа → Библиотека», отметить нужные изображения и выбрать действие «Конвертировать в WebP (DN)».</p>';
		echo '</div>'; // close .wrap
	}

	/**
	* Выводит JS для управления массовой конвертацией
	*/
	private function render_bulk_script($total_items) {
		?>
		<script type="text/javascript">
		jQuery(document).ready(function($){
			const startBtn = $('#dn-webp-start-bulk');
			const progressDiv = $('#dn-webp-bulk-progress');
			const progressBar = $('#dn-webp-progress-bar');
			const progressText = $('#dn-webp-progress-text');
			const errorCountText = $('#dn-webp-error-count');
			const completeDiv = $('#dn-webp-bulk-complete');
			const total = <?php echo $total_items; ?>;

			let processedCount = 0;
			let errorCount = 0;

			startBtn.on('click', function(){
				$(this).prop('disabled', true);
				progressDiv.show();
				run_conversion_batch();
			});

			function run_conversion_batch() {
				$.ajax({
					url: ajaxurl,
					type: 'POST',
					data: {
						action: '<?php echo self::AJAX_ACTION; ?>',
						nonce: '<?php echo wp_create_nonce(self::AJAX_NONCE); ?>'
					},
					dataType: 'json',
					success: function(response) {
						if (response.success) {
							processedCount += response.data.processed;
							errorCount += response.data.errors;

							progressBar.val(processedCount);
							progressText.text(processedCount);
							errorCountText.text(errorCount);

							if (response.data.done) {
								completeDiv.show();
								progressDiv.hide();
								startBtn.hide();
							} else {
								run_conversion_batch(); // Запускаем следующую пачку
							}
						} else {
							alert('Произошла ошибка: ' + response.data.message);
							startBtn.prop('disabled', false);
						}
					},
					error: function() {
						alert('Произошла критическая ошибка сервера. Попробуйте обновить страницу и запустить снова.');
						startBtn.prop('disabled', false);
					}
				});
			}
		});
		</script>
		<?php
	}

	/**
	* AJAX-обработчик для одной "пачки" изображений
	*/
	public function ajax_bulk_convert() {
		check_ajax_referer(self::AJAX_NONCE, 'nonce');

		if (!current_user_can('upload_files')) {
			wp_send_json_error(['message' => 'Недостаточно прав.']);
		}

		$batch_size = 5; // Обрабатываем по 5 изображений за раз

		$query = new \WP_Query([
			'post_type'      => 'attachment',
			'post_status'    => 'inherit',
			'post_mime_type' => ['image/jpeg', 'image/png'],
			'posts_per_page' => $batch_size,
			'fields'         => 'ids',
			'meta_query'     => [
				[
					'key'     => self::META_DONE,
					'compare' => 'NOT EXISTS',
				]
			]
		]);

		$ids = $query->posts;
		$processed = 0;
		$errors = 0;

		if (empty($ids)) {
			wp_send_json_success(['processed' => 0, 'errors' => 0, 'done' => true]);
		}

		foreach ($ids as $id) {
			$result = $this->convert_attachment($id, true);
			if ($result === true) {
				$processed++;
			} else {
				$errors++;
			}
		}

		// Проверяем, остались ли ещё файлы
		$remaining_query = new \WP_Query([
			'post_type' => 'attachment',
			'post_status' => 'inherit',
			'post_mime_type' => ['image/jpeg', 'image/png'],
			'posts_per_page' => 1,
			'fields' => 'ids',
			'meta_query' => [ [ 'key' => self::META_DONE, 'compare' => 'NOT EXISTS' ] ]
		]);
		$is_done = !$remaining_query->have_posts();

		wp_send_json_success(['processed' => $processed, 'errors' => $errors, 'done' => $is_done]);
	}

	// =========================================================================
	// ИСПРАВЛЕННАЯ ФУНКЦИЯ
	// =========================================================================

	/** Основная функция конвертации и переноса */
	public function convert_attachment($attachment_id, $force = false, $existing_meta = null){
		// Очищаем кэш поста, чтобы работать с актуальными данными
		clean_post_cache($attachment_id);

		$att = get_post($attachment_id);
		if (!$att || $att->post_type !== 'attachment') return 'not attachment';

		$type = get_post_mime_type($attachment_id);
		if (!in_array($type, ['image/jpeg','image/png'], true)) return 'not raster image';

		// Уже конвертировано?
		if (!$force && get_post_meta($attachment_id, self::META_DONE, true)) return true;

		// **ИСПРАВЛЕНИЕ:** Получаем URL до всех изменений для корректной замены в постах
		$old_url = wp_get_attachment_url($attachment_id);
		$old_path = get_attached_file($attachment_id);
		if (!$old_path || !file_exists($old_path)) return 'file not found';

		$quality = (int) get_option(self::OPT_QLT, 82);
		$uploads = wp_get_upload_dir();
		$basedir = $uploads['basedir'];
		$baseurl = $uploads['baseurl'];

		// Текущая годовая папка для назначения
		$year = date_i18n('Y');
		$year_dir = trailingslashit($basedir) . $year . '/';
		if (!wp_mkdir_p($year_dir)) return 'mkdir failed';

		$pi = pathinfo($old_path);
		$original_dir = trailingslashit($pi['dirname']);
		$basename = $pi['filename'];

		$new_path = $year_dir . $basename . '.webp';

		// Размер оригинала до удаления
		$orig_bytes = filesize($old_path);
		$total_orig_bytes = $orig_bytes; // Суммарный вес с миниатюрами

		$url_replacements = [];

		// Конвертируем основной файл
		$ok = $this->make_webp($old_path, $new_path, $quality, $type);
		if (!$ok || !file_exists($new_path)) {
			return 'convert main file fail';
		}

		// Получаем метаданные (информацию о миниатюрах)
		$meta = $existing_meta ?: wp_get_attachment_metadata($attachment_id);
		if (!is_array($meta)) $meta = [];

		$files_to_delete = [$old_path];

		// **ИСПРАВЛЕНИЕ: Полностью переписанный блок обработки миниатюр**
		if (!empty($meta['sizes']) && is_array($meta['sizes'])) {
			$new_sizes = []; // Будем складывать сюда успешно обработанные миниатюры

			foreach ($meta['sizes'] as $size => $info) {
				if (empty($info['file'])) continue;

				$thumb_old_path = $original_dir . $info['file'];
				if (!file_exists($thumb_old_path)) continue;

				$total_orig_bytes += filesize($thumb_old_path);

				$thumb_pi = pathinfo($info['file']);
				$thumb_new_filename = $thumb_pi['filename'] . '.webp';
				$thumb_new_path = $year_dir . $thumb_new_filename;

				// Конвертируем миниатюру
				$thumb_ok = $this->make_webp($thumb_old_path, $thumb_new_path, $quality, $info['mime-type'] ?? $type);

				if ($thumb_ok) {
					$old_thumb_relative = ltrim(str_replace($basedir, '', wp_normalize_path($thumb_old_path)), '/');
					if ($old_thumb_relative) {
						$url_replacements[$baseurl . '/' . $old_thumb_relative] = trailingslashit($baseurl) . $year . '/' . $thumb_new_filename;
					}
					// Если успешно, обновляем информацию и добавляем в новый массив
					$info['file'] = $thumb_new_filename;
					$info['mime-type'] = 'image/webp';
					$new_sizes[$size] = $info;
					$files_to_delete[] = $thumb_old_path; // Добавляем старую миниатюру в список на удаление
				}
				// Если не удалось - просто не добавляем ее в $new_sizes, она "пропадет"
			}
			$meta['sizes'] = $new_sizes; // Заменяем старый массив размеров на новый, с WebP
		}

		// Обновляем привязку основного файла
		update_attached_file($attachment_id, $new_path);

		// Обновляем метаданные в базе
		$meta['file'] = $year . '/' . $basename . '.webp';
		wp_update_attachment_metadata($attachment_id, $meta);

		// Меняем тип вложения
		wp_update_post([
			'ID' => $attachment_id,
			'post_mime_type' => 'image/webp',
		]);

		// Собираем суммарный вес всех WebP файлов
		$total_webp_bytes = filesize($new_path);
		if (!empty($meta['sizes'])) {
			foreach($meta['sizes'] as $size => $info){
				$webp_thumb_path = $year_dir . $info['file'];
				if (file_exists($webp_thumb_path)) {
					$total_webp_bytes += filesize($webp_thumb_path);
				}
			}
		}

		// Сохраняем статистику
		update_post_meta($attachment_id, self::META_ORIG, $total_orig_bytes);
		update_post_meta($attachment_id, self::META_WEBP, $total_webp_bytes);
		update_post_meta($attachment_id, self::META_DONE, 1);

		// **ИСПРАВЛЕНИЕ:** Удаляем все старые файлы только после всех успешных операций
		foreach ($files_to_delete as $file_path) {
			@unlink($file_path);
		}

		// Обновляем ссылки в контенте постов
		$new_url = wp_get_attachment_url($attachment_id); // Получаем новый URL, это надежнее
		if ($new_url) {
			$url_replacements[$old_url] = $new_url;
		}
		foreach ($url_replacements as $from => $to) {
			$this->replace_urls_in_posts($from, $to);
		}

		// Обновляем GUID вложения, если он совпадал со старым URL
		$att_guid = get_post_field('guid', $attachment_id);
		if ($att_guid && $old_url && $att_guid === $old_url) {
			global $wpdb;
			$wpdb->update($wpdb->posts, ['guid' => $new_url], ['ID' => $attachment_id]);
		}

		return true;
	}


	private function make_webp($src, $dst, $quality, $mime){
		$ok = false;
		if (class_exists('Imagick')) {
			try{
				$im = new \Imagick($src);
				$im->setImageFormat('webp');
				$im->setImageCompressionQuality($quality);
				$im->writeImage($dst);
				$im->clear(); $im->destroy();
				if (file_exists($dst)) $ok = true;
			} catch (\Exception $e) { $ok=false; }
		}
		if (!$ok && function_exists('imagewebp')) {
			$im = null;
			if (stripos($mime, 'png') !== false && function_exists('imagecreatefrompng')) {
				$im = @imagecreatefrompng($src);
			} elseif (stripos($mime, 'jpeg') !== false && function_exists('imagecreatefromjpeg')) {
				$im = @imagecreatefromjpeg($src);
			}

			if ($im) {
				if (function_exists('imagepalettetotruecolor')) imagepalettetotruecolor($im);
				if (function_exists('imagealphablending')) imagealphablending($im, true);
				if (function_exists('imagesavealpha')) imagesavealpha($im, true);
				$ok = imagewebp($im, $dst, $quality);
				imagedestroy($im);
			}
		}
		return $ok;
	}

	private function replace_urls_in_posts($old_url, $new_url){
		if (!$old_url || !$new_url || $old_url === $new_url) return;
		global $wpdb;

		// Экранируем URL для безопасного использования в LIKE
		$old_url_like = '%' . $wpdb->esc_like(parse_url($old_url, PHP_URL_PATH)) . '%';

		// Ищем посты, содержащие путь к файлу, а не полный URL, чтобы быть более гибкими
		$posts = $wpdb->get_results( $wpdb->prepare(
		"SELECT ID, post_content FROM {$wpdb->posts} WHERE post_content LIKE %s", $old_url_like
		) );

		foreach($posts as $p){
			$updated = str_replace($old_url, $new_url, $p->post_content);
			if ($updated !== $p->post_content) {
				$wpdb->update($wpdb->posts, ['post_content'=>$updated], ['ID'=>$p->ID]);
				clean_post_cache($p->ID);
			}
		}
	}
}

new DN_WebP_Converter();
